##-----lab-----
setwd("~/Documents/R/M2 biostatistiques/MOOC/Lab")
load("smp_v1.rda") #import smp
View(smp)
#--- définir le répertoire de travail----
#insérer le code ici :
setwd("~/Documents/R/M2 biostatistiques/MOOC/Lab")
#--- définir le répertoire de travail----
#insérer le code ici :
setwd("~/Documents/R/M2 biostatistiques/MOOC/Lab")#-----correction----
setwd("~/Documents/R/M2 biostatistiques/MOOC/Lab")
#--- importer smp----
#insérer le code ici :
load(smp_v1.rda)
#--- importer smp----
#insérer le code ici :
load("smp_v1.rda")
#--- noms des variables----
#insérer le code ici :
names(smp)
#--- première valeur de la variable âge----
#insérer le code ici :
samp$[1]
#--- première valeur de la variable âge----
#insérer le code ici :
smp$[1]
#--- première valeur de la variable âge----
#insérer le code ici :
smp[1]
#--- première valeur de la variable âge----
#insérer le code ici :
smp$age[1]
#--- première valeur ligne 1, colonne 1----
#insérer le code ici :
smp[1,1]
#--- premières valeurs de la variable prof----
#insérer le code ici :
head(smp$prof)
#--- tester si prof == "agriculteur"----
#insérer le code ici :
smp$prof == "agriculteur"
head(smp$prof == "agriculteur")
#--- ajouter courbe de densité âge----
#insérer le code ici :
#-----correction----
lines(density(smp$age, na.rm=TRUE))
head(smp$prof)
head(smp$prof == "agriculteur")
table(smp$prof == "agriculteur")
which(smp$prof == "agriculteur")
head(smp$prof == "agriculteur")
smp$age[which(smp$prof == "agriculteur")]
subset(smp, prof == "agriculteur", age)
#--- âge des agriculteurs avec subset----
#insérer le code ici :
#-----correction----
subset(smp, prof == "agriculteur", age)
#quiz 1
min(smp)
z <- c("prof", "agriculteur", "métier", NA, NA)"
z <- c("prof", "agriculteur", "métier", NA, NA)
z <- c("prof", "agriculteur", "métier", NA, NA)
sum(table(z))
View(smp)
table(smp$dur.interv)
summary(smp$dur.interv))
summary(smp$dur.interv)
factor(smp$n.fratrie >= 5, labels = c("moins de 5", "5 et plus"))
smp$n.fratrie
smp$n.fratrie[smp$n.fratrie < 5] <-'<5' ; smp$n.fratrie[smp$n.fratrie >= 5] <- '5+'
smp$n.fratrie
smp$ecole == 1 or 2 or 3
#Donnez le nombre de lignes du tableau de données pour lesquelles la variable ecole vaut 1, 2 ou 3:
nrow(smp[smp$ecole %in% c(1, 2, 3), ])
#Donnez le nombre de lignes du tableau de données pour lesquelles la variable ecole vaut 1, 2 ou 3:
nrow(subset(smp, ecole %in% c(1, 2, 3)))
nrow(smp[smp$ecole %in% vector123, ])
#autre façon serait de faire
vector123 <- c(1, 2, 3)
nrow(smp[smp$ecole %in% vector123, ])
smp$prof
sansemploi <- "sans emploi"
nrow(smp[smp$prof %in% sansemploi, ])
setwd("~/Documents/R/M2 biostatistiques/MOOC/devoir 1")
#satisfaction à l'hopital
satisfaction_hopital <- read_csv("satisfaction_hopital.csv")
#satisfaction à l'hopital
satisfaction_hopital <- read_csv2("satisfaction_hopital.csv")
#satisfaction à l'hopital
satisfaction_hopital <- read.csv2("satisfaction_hopital.csv")
#voir quelles sont les variables catégorielles
str(satisfaction_hopital)
Hmisc::describe(satisfaction_hopital)
describe(satisfaction_hopital)
library(prettyR)
describe(satisfaction_hopital)
describe(satisfaction_hopital)
install.packages("prettyR")
install.packages("prettyR")
library(prettyR)
#installer prettyR avec avertissement négatif si déjà installé
if(!require(prettyR)) install.packages("prettyR", dependencies=TRUE)
library(prettyR)
#voir quelles sont les variables catégorielles
str(satisfaction_hopital)
describe(satisfaction_hopital)
table(satisfaction_hopital$sexe)
#pourcentage sexe
prop.table(table(satisfaction_hopital$sexe))*100
prop.table(table(satisfaction_hopital$sexe))*100
#répartition et pourcentage profession
table(satisfaction_hopital$profession)
prop.table(table(satisfaction_hopital$profession))*100
#voir quelles sont les variables catégorielles
str(satisfaction_hopital)
prop.table(table(satisfaction_hopital$service))*100
#répartition et pourcentage service
table(satisfaction_hopital$service)
summary(satisfaction_hopital$age)
pie(table(satisfaction_hopital$sexe)
pieplot(table(satisfaction_hopital$sexe), main="Répartition
pie(table(satisfaction_hopital$sexe)
pie(table(satisfaction_hopital$sexe))
pie(table(satisfaction_hopital$sexe))
#afficher les pourcentages sur le pie
pie(table(satisfaction_hopital$sexe), labels = paste0(names(table(satisfaction_hopital$sexe)), " (", round(prop.table(table(satisfaction_hopital$sexe))*100, 1), "%)"))
#question 2
summary(satisfaction_hopital$age)
summary(satisfaction_hopital$amelioration.sante)
summary(satisfaction_hopital$amelioration.moral)
summary(satisfaction_hopital$recommander)
summary(satisfaction_hopital$score.relation)
summary(satisfaction_hopital$score.information)
summary(satisfaction_hopital$score.information, satisfaction_hopital$score.relation)
#question 3
hist(satisfaction_hopital$score.relation)
#question 4
boxplot(satisfaction_hopital$score.relation~sexe)
#question 4
boxplot(satisfaction_hopital$score.relation~satisfaction_hopital$sexe)
#question 4
boxplot(satisfaction_hopital$score.relation~satisfaction_hopital$sexe)
boxplot(satisfaction_hopital$score.relation ~ satisfaction_hopital$sexe,
xlab = "Sexe",
ylab = "Score de relation",
names = c("Hommes", "Femmes"),
main = "Distribution du score de relation selon le sexe")
boxplot(satisfaction_hopital$score.relation ~ satisfaction_hopital$sexe,
xlab = "Sexe",
ylab = "Score de relation",
names = c("Hommes", "Femmes"),
main = "Distribution du score de relation selon le sexe")
##question 1 : Pour les trois variables catégorielles du fichier (à vous de déterminer de quelles variables il s'agit), présentez les pourcentages de sujets relevant de chacune des modalités.
#voir quelles sont les variables catégorielles
str(satisfaction_hopital)
describe(satisfaction_hopital)
#répartition sexe et pourcentage sexe
table(satisfaction_hopital$sexe)
prop.table(table(satisfaction_hopital$sexe))*100
#répartition et pourcentage profession
table(satisfaction_hopital$profession)
prop.table(table(satisfaction_hopital$profession))*100
#répartition et pourcentage service
table(satisfaction_hopital$service)
prop.table(table(satisfaction_hopital$service))*100
#question 2
summary(satisfaction_hopital$age)
summary(satisfaction_hopital$amelioration.sante)
summary(satisfaction_hopital$amelioration.moral)
summary(satisfaction_hopital$recommander)
summary(satisfaction_hopital$score.relation)
summary(satisfaction_hopital$score.information)
#question 3
hist(satisfaction_hopital$score.relation)
#question 4
boxplot(satisfaction_hopital$score.relation~satisfaction_hopital$sexe)
boxplot(satisfaction_hopital$score.relation ~ satisfaction_hopital$sexe,
xlab = "Sexe",
ylab = "Score de relation",
names = c("Hommes", "Femmes"),
main = "Distribution du score de relation selon le sexe")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
ic_mean <- function(x, conf.level = 0.95){
x <- x[is.finite(x)]
n <- length(x); m <- mean(x); s <- sd(x); se <- s/sqrt(n)
alpha <- 1 - conf.level
tcrit <- qt(1 - alpha/2, df = n-1)
c(lower = m - tcrit*se, estimate = m, upper = m + tcrit*se, n = n)
}
ic_prop_exact <- function(k, n, conf.level = 0.95){
library(binom)
out <- binom.confint(k, n, methods = "exact", conf.level = conf.level)
c(lower = out$lower, estimate = out$mean, upper = out$upper, n = n)
}
# Exemples rapides
ic_mean(x_age)
ic_mean <- function(x, conf.level = 0.95){
x <- x[is.finite(x)]
n <- length(x); m <- mean(x); s <- sd(x); se <- s/sqrt(n)
alpha <- 1 - conf.level
tcrit <- qt(1 - alpha/2, df = n-1)
c(lower = m - tcrit*se, estimate = m, upper = m + tcrit*se, n = n)
}
ic_prop_exact <- function(k, n, conf.level = 0.95){
library(binom)
out <- binom.confint(k, n, methods = "exact", conf.level = conf.level)
c(lower = out$lower, estimate = out$mean, upper = out$upper, n = n)
}
# Exemples rapides
ic_mean(x_age)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# if (!exists("smp")) smp <- read.csv("S1C2_smp1.csv", sep = ";", dec = ",")
# if (!exists("smp")) smp <- read.csv("S1C2 smp1.csv", sep = ";", dec = ",")
# Aperçu rapide
if (!exists("smp")) stop("L'objet 'smp' n'existe pas. Importez-le puis relancez le tricotage.")
str(smp)
# Essayer de deviner la colonne 'age' (insensible à la casse)
age_col <- names(smp)[grepl("^age$", names(smp), ignore.case = TRUE)][1]
if (is.na(age_col) || is.null(age_col)) stop("Aucune colonne 'age' trouvée dans 'smp'. Adaptez 'age_col'.")
x_age <- smp[[age_col]]
# Nettoyage: garder les valeurs numériques finies
x_age <- suppressWarnings(as.numeric(x_age))
x_age <- x_age[is.finite(x_age)]
# Binaire dérivé pour la proportion : âge ≥ 40 ans
age_ge_40 <- as.integer(x_age >= 40)
n <- length(x_age)
mean_x <- mean(x_age)
sd_x   <- sd(x_age)
se_x   <- sd_x / sqrt(n)          # ⚠️ bien /sqrt(n) (et non /n)
alpha  <- 0.05
tcrit <- qt(1 - alpha/2, df = n-1)
IC95_low <- mean_x - tcrit * se_x
IC95_high<- mean_x + tcrit * se_x
data.frame(
n = n,
mean = mean_x,
sd = sd_x,
se = se_x,
tcrit = tcrit,
IC95_low = IC95_low,
IC95_high = IC95_high
) |>
dplyr::mutate(dplyr::across(dplyr::where(is.numeric), ~round(., 2)))
res_t <- t.test(x_age, conf.level = 0.95)
res_t$conf.int
res_t$estimate
library(prettyR)
describe(smp$age)
38.9-1.96*13.28/sqrt(797)
38.9+1.96*13.28/sqrt(797)
library(prettyR)
describe(smp$age)
library(binom)
binom.confint(3,10,method="all")
#méthode passe partout : méthode "exact"
binom.confint(3,10,method="exact")
binom.confint(300,1000,method="all")
#quand l'échantillon augmente, toutes les méthodes convergent vers la même valeur
source("~/.active-rstudio-document", echo = TRUE)
plot(jitter(smp$age),jitter(smp.c$n.enfant))
plot(jitter(smp$age),jitter(smp$n.enfant))
cor(smp$age,smp$n.enfant,use="complete.obs")
# Vecteur d'URLs
urls <- c(
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/774d41a3-59c1-5bf4-8c98-c0d4f4eef264/mp4/1585769717_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/57861137-0ed1-536d-8360-8a1f32db00b2/mp4/1585769733_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/d7391bed-fca1-5f3e-81af-b732f6c8020b/mp4/1585769742_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/cab316d6-51f1-55b6-87af-456ee0459646/mp4/1585769747_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/75f5c5d1-9980-5f8a-b671-aae14467aaa9/mp4/1585769755_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/f54bebb0-5694-50dc-9206-d21a2c3a0e9b/mp4/1585769764_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/22295464-8470-5f1c-bd8f-de5db1a2361c/mp4/1585769772_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/3e0c9842-c3ad-5393-9acd-71a36c34258a/mp4/1585769780_720.mp4",
"https://ff933736-7b27-4cb8-b59e-a1b7af5eaab3.svc.edge.scw.cloud/aws/4b4a5f99-9f8e-5a56-88c8-0ed74871a567/mp4/1585769790_720.mp4"
)
# Noms de fichiers de sortie (automatiques ici, mais tu peux les changer)
fichiers <- basename(urls)
# Téléchargement en boucle
mapply(function(u, f) {
download.file(url = u, destfile = f, mode = "wb")
}, urls, fichiers)
knit_with_parameters("~/Documents/R/M2biostatistiques/MOOC/S1C2 représentations graphique.rmd")
knitr::opts_chunk$set(echo = TRUE)
smp.c <- read.csv2("S1C2 smp1.csv")
setwd("~/Documents/R/M2biostatistiques/MOOC")
smp.c <- read.csv2("S1C2 smp1.csv")
help("subset")
mean(smp.c$n.enfant[smp.c$dep.cons == 1])
mean(smp.c$n.enfant[smp.c$dep.cons == 1], na.rm = TRUE)
quantile(smp$duree[smp$age < 35], probs = 0.75, na.rm = TRUE)
smp$duree
View(smp.c)
View(smp)
```{r setup, include=FALSE}
S3 C8 Principe des tests statistiques
rm(smp.c)
str(smp)
cor(smp.c$age,smp.c$n.enfant,use="complete.obs")
str(smp)
cor(smp$age,smp.c$n.enfant,use="complete.obs")
str(smp)
cor(smp$age,smp$n.enfant,use="complete.obs")
str(smp$ed)
smp$ed.b <- ifelse(smp$ed > 2, 1, 0) # seuil de binarisation
str(smp) # vérifier types et dimensions
smp$ed.b <- ifelse(smp$ed > 2, 1, 0) # seuil de binarisation
str(smp) # vérifier types et dimensions
table(smp$ed.b,smp$ed, deparse.level = 2)
table(smp$ed.b, smp$dep.cons, deparse.level = 2, useNA = "always")
tab <- table(smp$ed.b, smp$dep.cons, deparse.level = 2)
prop.table(tab, 1) # % par ligne : chaque ligne somme à 1
prop.table(tab, 2) # % par colonne : chaque colonne somme à 1
chisq.test(smp$ed.b, smp$dep.cons, correct = FALSE)
tab <- table(smp$ed.b, smp$dep.cons) \# on enlève les NA pour les tests
tab <- table(smp$ed.b, smp$dep.cons) \# on enlève les NA pour les tests
tab <- table(smp$ed.b, smp$dep.cons) \# on enlève les NA pour les tests
tab <- table(smp$ed.b, smp$dep.cons)# on enlève les NA pour les tests
prop.table(tab, 1) # % par ligne
prop.table(tab, 2) # % par colonne
smp <- read.csv2("S1C2 smp1.csv")
str(smp$ed)
smp$ed.b      <- factor(smp$ed.b, levels = c(0,1), labels = c("≤2",">2"))
chisq.test(smp$ed.b, smp$dep.cons, correct = FALSE)
smp <- read.csv2("S1C2 smp1.csv")
str(smp$ed)
smp$ed.b <- ifelse(smp$ed > 2, 1, 0) # seuil de binarisation
str(smp) # vérifier types et dimensions
table(smp$ed.b,smp$ed, deparse.level = 2)
chisq.test(smp$ed.b, smp$dep.cons, correct = FALSE)
chisq.test(smp$ed.b, smp$dep.cons, correct = TRUE)
#syntaxe : chisq.test(variable1, variable2)
chisq.test(smp$ed.b, smp$dep.cons, correct = FALSE)
#syntaxe : chisq.test(variable1, variable2)
fisher.test(smp$ed.b, smp$dep.cons)
